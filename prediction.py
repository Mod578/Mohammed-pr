# -*- coding: utf-8 -*-
"""Mohammed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L9bII9L3I4ZSLUF1MVcfZh-5BmR1NEkr

Black Friday Sales - Data Analysis
"""

import cudf
from cuml import train_test_split
from cuml.ensemble import RandomForestClassifier
from cuml.linear_model import LinearRegression
from cuml.cluster import KMeans
from cuml.metrics import accuracy_score, mean_squared_error
from pynvml import nvmlInit, nvmlDeviceGetHandleByIndex, nvmlDeviceGetUtilizationRates, nvmlDeviceGetMemoryInfo
import matplotlib.pyplot as plt
import time

data_path = 'Black Friday Dataset.csv'
df = cudf.read_csv(data_path)

df

df = df.dropna()
df['Gender'] = df['Gender'].replace({'F': '0', 'M': '1'}).astype('int32')
df['Age'] = df['Age'].astype('category').cat.codes
df['City_Category'] = df['City_Category'].astype('category').cat.codes
df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].replace('4+', '4').astype('int32')
df['Product_Category_2'] = df['Product_Category_2'].fillna(0).astype('int32')
df['Product_Category_3'] = df['Product_Category_3'].fillna(0).astype('int32')

X = df[['Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years',
        'Marital_Status', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3']]
y_classification = df['Purchase'] > df['Purchase'].mean()
y_regression = df['Purchase']

X_train, X_test, y_train_class, y_test_class = train_test_split(X, y_classification, test_size=0.2, random_state=42)
X_train, X_test, y_train_reg, y_test_reg = train_test_split(X, y_regression, test_size=0.2, random_state=42)

start_time = time.time()
rf_model = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)
rf_model.fit(X_train, y_train_class)
rf_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test_class, rf_pred)
rf_training_time = time.time() - start_time

start_time = time.time()
lr_model = LinearRegression()
lr_model.fit(X_train, y_train_reg)
lr_pred = lr_model.predict(X_test)
lr_mse = mean_squared_error(y_test_reg, lr_pred)
lr_training_time = time.time() - start_time

start_time = time.time()
kmeans_model = KMeans(n_clusters=5, random_state=42)
kmeans_labels = kmeans_model.fit_predict(X_train)
kmeans_training_time = time.time() - start_time

nvmlInit()
handle = nvmlDeviceGetHandleByIndex(0)

gpu_utilization = nvmlDeviceGetUtilizationRates(handle)
memory_info = nvmlDeviceGetMemoryInfo(handle)

print(f"GPU Utilization: {gpu_utilization.gpu}%")
print(f"GPU Memory Used: {memory_info.used / (1024**2):.2f} MB")
print(f"GPU Memory Total: {memory_info.total / (1024**2):.2f} MB")

plt.figure(figsize=(10, 6))
plt.hist(df['Purchase'].to_pandas(), bins=50, color='blue', alpha=0.7)
plt.title('Purchase Distribution')
plt.xlabel('Purchase Amount')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
gender_purchase = df.to_pandas().groupby('Gender')['Purchase'].mean()
gender_purchase.plot(kind='bar', color=['blue', 'orange'])
plt.title('Average Purchase by Gender')
plt.xlabel('Gender (0: Female, 1: Male)')
plt.ylabel('Average Purchase Amount')
plt.show()

plt.figure(figsize=(10, 6))
age_purchase = df.to_pandas().groupby('Age')['Purchase'].mean()
age_purchase.plot(kind='bar', color='green')
plt.title('Average Purchase by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Average Purchase Amount')
plt.show()

numeric_df = df.select_dtypes(include=['int32', 'float32', 'float64'])
if numeric_df.shape[1] >= 2:
    correlation_matrix = numeric_df.to_pandas().corr()
    plt.figure(figsize=(12, 8))
    plt.imshow(correlation_matrix, cmap='coolwarm', interpolation='none')
    plt.colorbar()
    plt.title('Correlation Heatmap')
    plt.xticks(range(len(correlation_matrix)), correlation_matrix.columns, rotation=90)
    plt.yticks(range(len(correlation_matrix)), correlation_matrix.columns)
    plt.show()
else:
    print("Not enough numeric columns to calculate a correlation matrix.")

print(f"Random Forest Accuracy: {rf_accuracy:.2f}, Training Time: {rf_training_time:.2f}s")
print(f"Linear Regression MSE: {lr_mse:.2f}, Training Time: {lr_training_time:.2f}s")
print(f"K-Means Training Time: {kmeans_training_time:.2f}s")



from joblib import dump
dump(rf_model, 'model.joblib')

from sklearn.preprocessing import StandardScaler
from joblib import dump

scalar = StandardScaler()
dump(scalar, 'scalar.joblib')

X_test.to_csv('X_test.csv', index=False)

from joblib import load
import pandas as pd
import cudf

def predict(input_data):
    model = load('model.joblib')
    predictions = model.predict(input_data)
    return predictions

if __name__ == "__main__":
    input_data = pd.read_csv('X_test.csv')
    input_data = cudf.from_pandas(input_data)
    print(predict(input_data))

